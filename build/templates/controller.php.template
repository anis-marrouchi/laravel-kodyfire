<?php
namespace {{ namespace }};

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Log;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\Request;
{{!-- use App\Http\Requests\Create{{ classify name}}Request;
use App\Http\Requests\Update{{ classify name}}Request; --}}
use App\Http\Requests\\{{ classify name}}Request;
use App\Http\Resources\\{{ classify name}}Resource;
use App\Storage\DataBag;
use App\Models\\{{ classify name}};
use App\Repositories\\{{ classify name}}Repository;

class {{ class}} extends Controller
{
    
public function index(Request  $request) {
    try {
      $pageSize = $request->query('pageSize');
      $currentPage = $request->query('page');
      $search = $request->query('q');
      $sortBy = $request->query('sortBy');
      $sortOrder = $request->query('sortDesc', false)? 'desc' : 'asc';
      Paginator::currentPageResolver(function () use ($currentPage) {
        return $currentPage;
      });

      $data = {{ classify name}}::query();

      if ($search != "") {
        $data = $data->where(
          function ($q) use ($search) {
            $q->where('name', 'like', "%{$search}%");;
          }
        );
      }

      if($sortBy) {
        $data = $data->orderBy($sortBy, $sortOrder);
      }
      
      if($currentPage) {
        $data = new \App\Http\Resources\\{{ classify name}}Collection($data->paginate($pageSize));
      } else {
        $data = ['data' => {{ classify name}}Resource::collection($data->get())];
      }

    } catch (\Throwable $th) {
      return response()->json([
        'error' => config('app.env') == 'local' ? $th->getMessage() : __('app.errorMsg'),
      ], 500);
    }
    return response()->json($data);
  }

  public function show({{ classify name}} ${{camelize name}})
  {
    try {
      $data = ${{camelize name}};
    } catch (\Throwable $th) {
      Log::error($th->getMessage());
      return response()->json([
        'error' => __('app.errorMsg'),
      ], 500);
    }
    $data = new {{ classify name}}Resource($data);
    return response()->json(['data' => $data]);
  }


  public function store({{ classify name}}Request $request, {{ classify name}}Repository $repository)
  {
    $data = new DataBag(['data' => $request->all()]);
    try {
      $model = $repository->create($data);
    } catch (\Exception $e) {
      Log::error($e->getMessage());
      return response()->json([
        'error' => $e->getMessage(),
      ], 500);
    }
    $message = trans('app.createSuccessMsg');
    return response()->json(['data' => $model, 'message' => $message, 'success' => true]);
  }

  public function update({{ classify name}}Request $request, {{ classify name}} ${{ camelize name}}, {{ classify name}}Repository $repository)
  {
    $data = new DataBag(['data' => $request->all()]);
    try {
      $model = $repository->update(${{ camelize name}}, $data);
    } catch (\Exception $e) {
      Log::error($e->getMessage());
      return response()->json([
        'error' => $e->getMessage(),
      ], 500);
    }
    $message = trans('app.updateSuccessMsg');
    return response()->json(['data' => $model, 'message' => $message, 'success' => true]);
  }

  public function destroy({{ classify name}} ${{ camelize name}})
  {
    try {

      ${{ camelize name}}->delete();
    } catch (\Exception $e) {
      Log::error($e->getMessage());
      return response()->json([
        'error' => __('app.errorMsg'),
      ], 500);
    }
    $message = trans('app.deleteSuccessMsg');
    return response()->json(['message' => $message], 200);
  }

}
    